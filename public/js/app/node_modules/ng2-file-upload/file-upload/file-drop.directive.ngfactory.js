/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from 'ng2-file-upload/file-upload/file-drop.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import3 from '@angular/core/src/linker/view_utils';
export class Wrapper_FileDropDirective {
    constructor(p0) {
        this._changed = false;
        this.context = new import0.FileDropDirective(p0);
        this._expr_0 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
    }
    check_uploader(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.uploader = currValue;
            this._expr_0 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        if ((eventName == 'drop')) {
            const pd_sub_0 = (this.context.onDrop($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'dragover')) {
            const pd_sub_1 = (this.context.onDragOver($event) !== false);
            result = (pd_sub_1 && result);
        }
        if ((eventName == 'dragleave')) {
            const pd_sub_2 = (this.context.onDragLeave($event) !== false);
            result = (pd_sub_2 && result);
        }
        return result;
    }
    subscribe(view, _eventHandler, emit0, emit1) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.fileOver.subscribe(_eventHandler.bind(view, 'fileOver')));
        }
        if (emit1) {
            (this.subscription1 = this.context.onFileDrop.subscribe(_eventHandler.bind(view, 'onFileDrop')));
        }
    }
}
//# sourceMappingURL=file-drop.directive.ngfactory.js.map