/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@ng-bootstrap/ng-bootstrap/popover/popover';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
export class Wrapper_NgbPopover {
    constructor(p0, p1, p2, p3, p4, p5, p6) {
        this._changed = false;
        this.context = new import0.NgbPopover(p0, p1, p2, p3, p4, p5, p6);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        this.context.ngOnDestroy();
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
    }
    check_ngbPopover(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.ngbPopover = currValue;
            this._expr_0 = currValue;
        }
    }
    check_popoverTitle(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.popoverTitle = currValue;
            this._expr_1 = currValue;
        }
    }
    check_placement(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.placement = currValue;
            this._expr_2 = currValue;
        }
    }
    check_triggers(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.triggers = currValue;
            this._expr_3 = currValue;
        }
    }
    check_container(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.container = currValue;
            this._expr_4 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler, emit0, emit1) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.shown.subscribe(_eventHandler.bind(view, 'shown')));
        }
        if (emit1) {
            (this.subscription1 = this.context.hidden.subscribe(_eventHandler.bind(view, 'hidden')));
        }
    }
}
export class Wrapper_NgbPopoverWindow {
    constructor() {
        this._changed = false;
        this.context = new import0.NgbPopoverWindow();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_placement(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.placement = currValue;
            this._expr_0 = currValue;
        }
    }
    check_title(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.title = currValue;
            this._expr_1 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_2 = ('popover in popover-' + this.context.placement);
        if (import3.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            view.renderer.setElementProperty(el, 'className', currVal_2);
            this._expr_2 = currVal_2;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_NgbPopoverWindow_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
class View_NgbPopoverWindow_Host0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbPopoverWindow_Host0, renderType_NgbPopoverWindow_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ngb-popover-window', new import3.InlineArray2(2, 'role', 'tooltip'), rootSelector, null);
        this.compView_0 = new View_NgbPopoverWindow0(this.viewUtils, this, 0, this._el_0);
        this._NgbPopoverWindow_0_3 = new Wrapper_NgbPopoverWindow();
        this.compView_0.create(this._NgbPopoverWindow_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._NgbPopoverWindow_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.NgbPopoverWindow) && (0 === requestNodeIndex))) {
            return this._NgbPopoverWindow_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        if (this._NgbPopoverWindow_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this._NgbPopoverWindow_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    }
}
export const NgbPopoverWindowNgFactory = new import7.ComponentFactory('ngb-popover-window', View_NgbPopoverWindow_Host0, import0.NgbPopoverWindow);
const styles_NgbPopoverWindow = [];
var renderType_NgbPopoverWindow = import3.createRenderComponentType('', 1, import5.ViewEncapsulation.None, styles_NgbPopoverWindow, {});
export class View_NgbPopoverWindow0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbPopoverWindow0, renderType_NgbPopoverWindow, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckOnce);
        this._expr_7 = import1.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'popover-arrow'), null);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_3 = import3.createRenderElement(this.renderer, parentRenderNode, 'h3', new import3.InlineArray2(2, 'class', 'popover-title'), null);
        this._text_4 = this.renderer.createText(this._el_3, '', null);
        this._el_5 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'popover-content'), null);
        this.projectNodes(this._el_5, 0);
        this._text_6 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._el_5,
            this._text_6
        ]), null);
        return null;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_7 = import3.inlineInterpolate(1, '', this.context.title, '');
        if (import3.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            this.renderer.setText(this._text_4, currVal_7);
            this._expr_7 = currVal_7;
        }
    }
}
//# sourceMappingURL=popover.ngfactory.js.map