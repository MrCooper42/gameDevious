/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@ng-bootstrap/ng-bootstrap/tooltip/tooltip';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
export class Wrapper_NgbTooltip {
    constructor(p0, p1, p2, p3, p4, p5, p6) {
        this._changed = false;
        this.context = new import0.NgbTooltip(p0, p1, p2, p3, p4, p5, p6);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        this.context.ngOnDestroy();
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
    }
    check_placement(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.placement = currValue;
            this._expr_0 = currValue;
        }
    }
    check_triggers(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.triggers = currValue;
            this._expr_1 = currValue;
        }
    }
    check_container(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.container = currValue;
            this._expr_2 = currValue;
        }
    }
    check_ngbTooltip(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.ngbTooltip = currValue;
            this._expr_3 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler, emit0, emit1) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.shown.subscribe(_eventHandler.bind(view, 'shown')));
        }
        if (emit1) {
            (this.subscription1 = this.context.hidden.subscribe(_eventHandler.bind(view, 'hidden')));
        }
    }
}
export class Wrapper_NgbTooltipWindow {
    constructor() {
        this._changed = false;
        this.context = new import0.NgbTooltipWindow();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_placement(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.placement = currValue;
            this._expr_0 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_1 = ('tooltip in tooltip-' + this.context.placement);
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            view.renderer.setElementProperty(el, 'className', currVal_1);
            this._expr_1 = currVal_1;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_NgbTooltipWindow_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
class View_NgbTooltipWindow_Host0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbTooltipWindow_Host0, renderType_NgbTooltipWindow_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ngb-tooltip-window', new import3.InlineArray2(2, 'role', 'tooltip'), rootSelector, null);
        this.compView_0 = new View_NgbTooltipWindow0(this.viewUtils, this, 0, this._el_0);
        this._NgbTooltipWindow_0_3 = new Wrapper_NgbTooltipWindow();
        this.compView_0.create(this._NgbTooltipWindow_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._NgbTooltipWindow_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.NgbTooltipWindow) && (0 === requestNodeIndex))) {
            return this._NgbTooltipWindow_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        if (this._NgbTooltipWindow_0_3.ngDoCheck(this, this._el_0, throwOnChange)) {
            this.compView_0.markAsCheckOnce();
        }
        this._NgbTooltipWindow_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    visitProjectableNodesInternal(nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    }
}
export const NgbTooltipWindowNgFactory = new import7.ComponentFactory('ngb-tooltip-window', View_NgbTooltipWindow_Host0, import0.NgbTooltipWindow);
const styles_NgbTooltipWindow = [];
var renderType_NgbTooltipWindow = import3.createRenderComponentType('', 1, import5.ViewEncapsulation.None, styles_NgbTooltipWindow, {});
export class View_NgbTooltipWindow0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbTooltipWindow0, renderType_NgbTooltipWindow, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckOnce);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'tooltip-arrow'), null);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_3 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'tooltip-inner'), null);
        this.projectNodes(this._el_3, 0);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4
        ]), null);
        return null;
    }
}
//# sourceMappingURL=tooltip.ngfactory.js.map