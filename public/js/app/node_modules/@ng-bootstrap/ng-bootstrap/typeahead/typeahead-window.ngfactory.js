/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@ng-bootstrap/ng-bootstrap/typeahead/typeahead-window';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/core/src/linker/view_container';
import * as import9 from '../../../@angular/common/src/directives/ng_for.ngfactory';
import * as import10 from '@angular/core/src/linker/template_ref';
import * as import11 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import12 from '@angular/common/src/directives/ng_for';
import * as import13 from '@ng-bootstrap/ng-bootstrap/typeahead/highlight';
import * as import14 from './highlight.ngfactory';
import * as import15 from '../../../@angular/common/src/directives/ng_template_outlet.ngfactory';
import * as import16 from '@angular/common/src/directives/ng_template_outlet';
export class Wrapper_NgbTypeaheadWindow {
    constructor() {
        this._changed = false;
        this.context = new import0.NgbTypeaheadWindow();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        (this.subscription0 && this.subscription0.unsubscribe());
    }
    check_focusFirst(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.focusFirst = currValue;
            this._expr_0 = currValue;
        }
    }
    check_results(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.results = currValue;
            this._expr_1 = currValue;
        }
    }
    check_term(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.term = currValue;
            this._expr_2 = currValue;
        }
    }
    check_formatter(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.formatter = currValue;
            this._expr_3 = currValue;
        }
    }
    check_resultTemplate(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.resultTemplate = currValue;
            this._expr_4 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.selectEvent.subscribe(_eventHandler.bind(view, 'select')));
        }
    }
}
var renderType_NgbTypeaheadWindow_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
class View_NgbTypeaheadWindow_Host0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbTypeaheadWindow_Host0, renderType_NgbTypeaheadWindow_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ngb-typeahead-window', new import3.InlineArray4(4, 'class', 'dropdown-menu', 'style', 'display: block'), rootSelector, null);
        this.compView_0 = new View_NgbTypeaheadWindow0(this.viewUtils, this, 0, this._el_0);
        this._NgbTypeaheadWindow_0_3 = new Wrapper_NgbTypeaheadWindow();
        this.compView_0.create(this._NgbTypeaheadWindow_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._NgbTypeaheadWindow_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.NgbTypeaheadWindow) && (0 === requestNodeIndex))) {
            return this._NgbTypeaheadWindow_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._NgbTypeaheadWindow_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this._NgbTypeaheadWindow_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
export const NgbTypeaheadWindowNgFactory = new import7.ComponentFactory('ngb-typeahead-window', View_NgbTypeaheadWindow_Host0, import0.NgbTypeaheadWindow);
const styles_NgbTypeaheadWindow = [];
var renderType_NgbTypeaheadWindow = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_NgbTypeaheadWindow, {});
export class View_NgbTypeaheadWindow0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbTypeaheadWindow0, renderType_NgbTypeaheadWindow, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_1 = new import8.ViewContainer(1, null, this, this._anchor_1);
        this._TemplateRef_1_4 = new import10.TemplateRef_(this, 1, this._anchor_1);
        this._text_2 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._vc_3 = new import8.ViewContainer(3, null, this, this._anchor_3);
        this._TemplateRef_3_5 = new import10.TemplateRef_(this, 3, this._anchor_3);
        this._NgFor_3_6 = new import9.Wrapper_NgFor(this._vc_3.vcRef, this._TemplateRef_3_5, this.parentView.injectorGet(import11.IterableDiffers, this.parentIndex), this.ref);
        this._text_4 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._anchor_1,
            this._text_2,
            this._anchor_3,
            this._text_4
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import10.TemplateRef) && (1 === requestNodeIndex))) {
            return this._TemplateRef_1_4;
        }
        if (((token === import10.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import12.NgFor) && (3 === requestNodeIndex))) {
            return this._NgFor_3_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_3_0_0 = this.context.results;
        this._NgFor_3_6.check_ngForOf(currVal_3_0_0, throwOnChange, false);
        this._NgFor_3_6.ngDoCheck(this, this._anchor_3, throwOnChange);
        this._vc_1.detectChangesInNestedViews(throwOnChange);
        this._vc_3.detectChangesInNestedViews(throwOnChange);
    }
    destroyInternal() {
        this._vc_1.destroyNestedViews();
        this._vc_3.destroyNestedViews();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 1)) {
            return new View_NgbTypeaheadWindow1(this.viewUtils, this, 1, this._anchor_1, this._vc_1);
        }
        if ((nodeIndex == 3)) {
            return new View_NgbTypeaheadWindow2(this.viewUtils, this, 3, this._anchor_3, this._vc_3);
        }
        return null;
    }
}
class View_NgbTypeaheadWindow1 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_NgbTypeaheadWindow1, renderType_NgbTypeaheadWindow, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    createInternal(rootSelector) {
        this._text_0 = this.renderer.createText(null, '\n      ', null);
        this._el_1 = import3.createRenderElement(this.renderer, null, 'ngb-highlight', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_1 = new import14.View_NgbHighlight0(this.viewUtils, this, 1, this._el_1);
        this._NgbHighlight_1_3 = new import14.Wrapper_NgbHighlight();
        this.compView_1.create(this._NgbHighlight_1_3.context);
        this._text_2 = this.renderer.createText(null, '\n    ', null);
        this.init(this._text_2, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2
        ]), null);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import13.NgbHighlight) && (1 === requestNodeIndex))) {
            return this._NgbHighlight_1_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_1_0_0 = this.context.formatter(this.context.result);
        this._NgbHighlight_1_3.check_result(currVal_1_0_0, throwOnChange, false);
        const currVal_1_0_1 = this.context.term;
        this._NgbHighlight_1_3.check_term(currVal_1_0_1, throwOnChange, false);
        if (this._NgbHighlight_1_3.ngDoCheck(this, this._el_1, throwOnChange)) {
            this.compView_1.markAsCheckOnce();
        }
        this.compView_1.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_1.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._text_0, ctx);
        cb(this._el_1, ctx);
        cb(this._text_2, ctx);
    }
}
class View_NgbTypeaheadWindow2 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_NgbTypeaheadWindow2, renderType_NgbTypeaheadWindow, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
        this._expr_9 = import1.UNINITIALIZED;
        this._map_10 = import3.pureProxy3((p0, p1, p2) => {
            return {
                result: p0,
                term: p1,
                formatter: p2
            };
        });
    }
    createInternal(rootSelector) {
        this._text_0 = this.renderer.createText(null, '\n      ', null);
        this._el_1 = import3.createRenderElement(this.renderer, null, 'button', new import3.InlineArray4(4, 'class', 'dropdown-item', 'type', 'button'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n          ', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1, null);
        this._vc_3 = new import8.ViewContainer(3, 1, this, this._anchor_3);
        this._TemplateRef_3_5 = new import10.TemplateRef_(this, 3, this._anchor_3);
        this._NgTemplateOutlet_3_6 = new import15.Wrapper_NgTemplateOutlet(this._vc_3.vcRef);
        this._text_4 = this.renderer.createText(this._el_1, '\n      ', null);
        this._text_5 = this.renderer.createText(null, '\n    ', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_1, new import3.InlineArray4(4, 'mouseenter', null, 'click', null), this.eventHandler(this.handleEvent_1));
        this.init(this._text_5, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._anchor_3,
            this._text_4,
            this._text_5
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import10.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import16.NgTemplateOutlet) && (3 === requestNodeIndex))) {
            return this._NgTemplateOutlet_3_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_3_0_0 = this._map_10(this.context.$implicit, this.parentView.context.term, this.parentView.context.formatter);
        this._NgTemplateOutlet_3_6.check_ngOutletContext(currVal_3_0_0, throwOnChange, false);
        const currVal_3_0_1 = (this.parentView.context.resultTemplate || this.parentView._TemplateRef_1_4);
        this._NgTemplateOutlet_3_6.check_ngTemplateOutlet(currVal_3_0_1, throwOnChange, false);
        this._NgTemplateOutlet_3_6.ngDoCheck(this, this._anchor_3, throwOnChange);
        this._vc_3.detectChangesInNestedViews(throwOnChange);
        const currVal_9 = (this.context.index === this.parentView.context.activeIdx);
        if (import3.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            this.renderer.setElementClass(this._el_1, 'active', currVal_9);
            this._expr_9 = currVal_9;
        }
    }
    destroyInternal() {
        this._vc_3.destroyNestedViews();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._text_0, ctx);
        cb(this._el_1, ctx);
        cb(this._text_5, ctx);
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 3)) {
            return new View_NgbTypeaheadWindow3(this.viewUtils, this, 3, this._anchor_3, this._vc_3);
        }
        return null;
    }
    handleEvent_1(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'mouseenter')) {
            const pd_sub_0 = (this.parentView.context.markActive(this.context.index) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'click')) {
            const pd_sub_1 = (this.parentView.context.select(this.context.$implicit) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    }
}
class View_NgbTypeaheadWindow3 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_NgbTypeaheadWindow3, renderType_NgbTypeaheadWindow, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    createInternal(rootSelector) {
        this._el_0 = this.renderer.createTemplateAnchor(null, null);
        this.init(this._el_0, (this.renderer.directRenderer ? null : []), null);
        return null;
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
//# sourceMappingURL=typeahead-window.ngfactory.js.map