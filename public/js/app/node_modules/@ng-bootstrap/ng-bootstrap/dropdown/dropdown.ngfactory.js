/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@ng-bootstrap/ng-bootstrap/dropdown/dropdown';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import3 from '@angular/core/src/linker/view_utils';
export var Wrapper_NgbDropdownToggle = (function () {
    function Wrapper_NgbDropdownToggle(p0, p1) {
        this._changed = false;
        this.context = new import0.NgbDropdownToggle(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_NgbDropdownToggle.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgbDropdownToggle.prototype.ngOnDestroy = function () {
    };
    Wrapper_NgbDropdownToggle.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NgbDropdownToggle.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_0 = this.context.dropdown.isOpen();
        if (import3.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            view.renderer.setElementAttribute(el, 'aria-expanded', ((currVal_0 == null) ? null : currVal_0.toString()));
            this._expr_0 = currVal_0;
        }
    };
    Wrapper_NgbDropdownToggle.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'click')) {
            var pd_sub_0 = (this.context.toggleOpen() !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    };
    Wrapper_NgbDropdownToggle.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_NgbDropdownToggle;
}());
export var Wrapper_NgbDropdown = (function () {
    function Wrapper_NgbDropdown(p0) {
        this._changed = false;
        this.context = new import0.NgbDropdown(p0);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
    }
    Wrapper_NgbDropdown.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgbDropdown.prototype.ngOnDestroy = function () {
        (this.subscription0 && this.subscription0.unsubscribe());
    };
    Wrapper_NgbDropdown.prototype.check_up = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.up = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_NgbDropdown.prototype.check_autoClose = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.autoClose = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_NgbDropdown.prototype.check__open = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context._open = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_NgbDropdown.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_NgbDropdown.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_3 = !this.context.up;
        if (import3.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            view.renderer.setElementClass(el, 'dropdown', currVal_3);
            this._expr_3 = currVal_3;
        }
        var currVal_4 = this.context.up;
        if (import3.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            view.renderer.setElementClass(el, 'dropup', currVal_4);
            this._expr_4 = currVal_4;
        }
        var currVal_5 = this.context.isOpen();
        if (import3.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementClass(el, 'open', currVal_5);
            this._expr_5 = currVal_5;
        }
    };
    Wrapper_NgbDropdown.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'keyup.esc')) {
            var pd_sub_0 = (this.context.closeFromOutsideEsc() !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'document:click')) {
            var pd_sub_1 = (this.context.closeFromOutsideClick($event) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    Wrapper_NgbDropdown.prototype.subscribe = function (view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.openChange.subscribe(_eventHandler.bind(view, 'openChange')));
        }
    };
    return Wrapper_NgbDropdown;
}());
//# sourceMappingURL=dropdown.ngfactory.js.map