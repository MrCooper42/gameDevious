/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker-day-view';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
export class Wrapper_NgbDatepickerDayView {
    constructor() {
        this._changed = false;
        this.context = new import0.NgbDatepickerDayView();
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
        this._expr_6 = import1.UNINITIALIZED;
        this._expr_7 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
    }
    check_currentMonth(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.currentMonth = currValue;
            this._expr_0 = currValue;
        }
    }
    check_date(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.date = currValue;
            this._expr_1 = currValue;
        }
    }
    check_disabled(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._expr_2 = currValue;
        }
    }
    check_selected(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.selected = currValue;
            this._expr_3 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
        const currVal_4 = this.context.selected;
        if (import3.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            view.renderer.setElementClass(el, 'bg-primary', currVal_4);
            this._expr_4 = currVal_4;
        }
        const currVal_5 = this.context.selected;
        if (import3.checkBinding(throwOnChange, this._expr_5, currVal_5)) {
            view.renderer.setElementClass(el, 'text-white', currVal_5);
            this._expr_5 = currVal_5;
        }
        const currVal_6 = this.context.isMuted();
        if (import3.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            view.renderer.setElementClass(el, 'text-muted', currVal_6);
            this._expr_6 = currVal_6;
        }
        const currVal_7 = !this.context.disabled;
        if (import3.checkBinding(throwOnChange, this._expr_7, currVal_7)) {
            view.renderer.setElementClass(el, 'btn-secondary', currVal_7);
            this._expr_7 = currVal_7;
        }
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler) {
        this._eventHandler = _eventHandler;
    }
}
var renderType_NgbDatepickerDayView_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
class View_NgbDatepickerDayView_Host0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbDatepickerDayView_Host0, renderType_NgbDatepickerDayView_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'div', new import3.InlineArray2(2, 'ngbDatepickerDayView', ''), rootSelector, null);
        this.compView_0 = new View_NgbDatepickerDayView0(this.viewUtils, this, 0, this._el_0);
        this._NgbDatepickerDayView_0_3 = new Wrapper_NgbDatepickerDayView();
        this.compView_0.create(this._NgbDatepickerDayView_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._NgbDatepickerDayView_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.NgbDatepickerDayView) && (0 === requestNodeIndex))) {
            return this._NgbDatepickerDayView_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._NgbDatepickerDayView_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._NgbDatepickerDayView_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
export const NgbDatepickerDayViewNgFactory = new import7.ComponentFactory('[ngbDatepickerDayView]', View_NgbDatepickerDayView_Host0, import0.NgbDatepickerDayView);
const styles_NgbDatepickerDayView = ['[_nghost-%COMP%] {      \n      text-align: center;\n      padding: 0.185rem 0.25rem;      \n      border-radius: 0.25rem;\n    }'];
var renderType_NgbDatepickerDayView = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.Emulated, styles_NgbDatepickerDayView, {});
export class View_NgbDatepickerDayView0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbDatepickerDayView0, renderType_NgbDatepickerDayView, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
        this._expr_1 = import1.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '', null);
        this.init(null, (this.renderer.directRenderer ? null : [this._text_0]), null);
        return null;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_1 = import3.inlineInterpolate(1, '', this.context.date.day, '');
        if (import3.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this.renderer.setText(this._text_0, currVal_1);
            this._expr_1 = currVal_1;
        }
    }
}
//# sourceMappingURL=datepicker-day-view.ngfactory.js.map