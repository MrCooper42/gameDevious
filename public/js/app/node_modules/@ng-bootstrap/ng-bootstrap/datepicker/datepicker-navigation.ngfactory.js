/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
import * as import0 from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker-navigation';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker-i18n';
import * as import9 from '@ng-bootstrap/ng-bootstrap/datepicker/ngb-calendar';
import * as import10 from '@angular/core/src/linker/view_container';
import * as import11 from '../../../@angular/common/src/directives/ng_if.ngfactory';
import * as import12 from '@angular/core/src/linker/template_ref';
import * as import13 from '@angular/common/src/directives/ng_if';
import * as import14 from '@ng-bootstrap/ng-bootstrap/datepicker/datepicker-navigation-select';
import * as import15 from './datepicker-navigation-select.ngfactory';
export class Wrapper_NgbDatepickerNavigation {
    constructor(p0, p1) {
        this._changed = false;
        this.context = new import0.NgbDatepickerNavigation(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
        this._expr_5 = import1.UNINITIALIZED;
    }
    ngOnDetach(view, componentView, el) {
    }
    ngOnDestroy() {
        (this.subscription0 && this.subscription0.unsubscribe());
        (this.subscription1 && this.subscription1.unsubscribe());
    }
    check_date(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.date = currValue;
            this._expr_0 = currValue;
        }
    }
    check_disabled(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.disabled = currValue;
            this._expr_1 = currValue;
        }
    }
    check_maxDate(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.maxDate = currValue;
            this._expr_2 = currValue;
        }
    }
    check_minDate(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.minDate = currValue;
            this._expr_3 = currValue;
        }
    }
    check_showSelect(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_4, currValue))) {
            this._changed = true;
            this.context.showSelect = currValue;
            this._expr_4 = currValue;
        }
    }
    check_showWeekNumbers(currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_5, currValue))) {
            this._changed = true;
            this.context.showWeekNumbers = currValue;
            this._expr_5 = currValue;
        }
    }
    ngDoCheck(view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    }
    checkHost(view, componentView, el, throwOnChange) {
    }
    handleEvent(eventName, $event) {
        var result = true;
        return result;
    }
    subscribe(view, _eventHandler, emit0, emit1) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.navigate.subscribe(_eventHandler.bind(view, 'navigate')));
        }
        if (emit1) {
            (this.subscription1 = this.context.select.subscribe(_eventHandler.bind(view, 'select')));
        }
    }
}
var renderType_NgbDatepickerNavigation_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
class View_NgbDatepickerNavigation_Host0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbDatepickerNavigation_Host0, renderType_NgbDatepickerNavigation_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ngb-datepicker-navigation', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_NgbDatepickerNavigation0(this.viewUtils, this, 0, this._el_0);
        this._NgbDatepickerNavigation_0_3 = new Wrapper_NgbDatepickerNavigation(this.injectorGet(import8.NgbDatepickerI18n, this.parentIndex), this.injectorGet(import9.NgbCalendar, this.parentIndex));
        this.compView_0.create(this._NgbDatepickerNavigation_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import7.ComponentRef_(0, this, this._el_0, this._NgbDatepickerNavigation_0_3.context);
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import0.NgbDatepickerNavigation) && (0 === requestNodeIndex))) {
            return this._NgbDatepickerNavigation_0_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        this._NgbDatepickerNavigation_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_0.destroy();
        this._NgbDatepickerNavigation_0_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
}
export const NgbDatepickerNavigationNgFactory = new import7.ComponentFactory('ngb-datepicker-navigation', View_NgbDatepickerNavigation_Host0, import0.NgbDatepickerNavigation);
const styles_NgbDatepickerNavigation = ['.collapsed[_ngcontent-%COMP%] {\n        margin-bottom: -1.7rem;\n    }'];
var renderType_NgbDatepickerNavigation = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.Emulated, styles_NgbDatepickerNavigation, {});
export class View_NgbDatepickerNavigation0 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement) {
        super(View_NgbDatepickerNavigation0, renderType_NgbDatepickerNavigation, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
        this._expr_25 = import1.UNINITIALIZED;
        this._expr_26 = import1.UNINITIALIZED;
        this._expr_27 = import1.UNINITIALIZED;
    }
    createInternal(rootSelector) {
        const parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'table', new import3.InlineArray2(2, 'class', 'w-100'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n      ', null);
        this._el_3 = import3.createRenderElement(this.renderer, this._el_1, 'tbody', import3.EMPTY_INLINE_ARRAY, null);
        this._el_4 = import3.createRenderElement(this.renderer, this._el_3, 'tr', import3.EMPTY_INLINE_ARRAY, null);
        this._text_5 = this.renderer.createText(this._el_4, '\n        ', null);
        this._el_6 = import3.createRenderElement(this.renderer, this._el_4, 'td', new import3.InlineArray2(2, 'class', 'text-sm-left'), null);
        this._text_7 = this.renderer.createText(this._el_6, '\n          ', null);
        this._el_8 = import3.createRenderElement(this.renderer, this._el_6, 'button', new import3.InlineArray4(4, 'class', 'btn btn-sm btn-secondary btn-inline', 'type', 'button'), null);
        this._text_9 = this.renderer.createText(this._el_8, '<', null);
        this._text_10 = this.renderer.createText(this._el_6, '\n        ', null);
        this._text_11 = this.renderer.createText(this._el_4, '\n        \n        ', null);
        this._anchor_12 = this.renderer.createTemplateAnchor(this._el_4, null);
        this._vc_12 = new import10.ViewContainer(12, 4, this, this._anchor_12);
        this._TemplateRef_12_5 = new import12.TemplateRef_(this, 12, this._anchor_12);
        this._NgIf_12_6 = new import11.Wrapper_NgIf(this._vc_12.vcRef, this._TemplateRef_12_5);
        this._text_13 = this.renderer.createText(this._el_4, '        \n        \n        ', null);
        this._el_14 = import3.createRenderElement(this.renderer, this._el_4, 'td', new import3.InlineArray2(2, 'class', 'text-sm-right'), null);
        this._text_15 = this.renderer.createText(this._el_14, '\n          ', null);
        this._el_16 = import3.createRenderElement(this.renderer, this._el_14, 'button', new import3.InlineArray4(4, 'class', 'next btn btn-sm btn-secondary btn-inline', 'type', 'button'), null);
        this._text_17 = this.renderer.createText(this._el_16, '>', null);
        this._text_18 = this.renderer.createText(this._el_14, '\n        ', null);
        this._text_19 = this.renderer.createText(this._el_4, '\n      ', null);
        this._text_20 = this.renderer.createText(this._el_3, '\n    ', null);
        this._text_21 = this.renderer.createText(parentRenderNode, '\n  ', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_8, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_8));
        var disposable_1 = import3.subscribeToRenderElement(this, this._el_16, new import3.InlineArray2(2, 'click', null), this.eventHandler(this.handleEvent_16));
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._el_4,
            this._text_5,
            this._el_6,
            this._text_7,
            this._el_8,
            this._text_9,
            this._text_10,
            this._text_11,
            this._anchor_12,
            this._text_13,
            this._el_14,
            this._text_15,
            this._el_16,
            this._text_17,
            this._text_18,
            this._text_19,
            this._text_20,
            this._text_21
        ]), [
            disposable_0,
            disposable_1
        ]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import12.TemplateRef) && (12 === requestNodeIndex))) {
            return this._TemplateRef_12_5;
        }
        if (((token === import13.NgIf) && (12 === requestNodeIndex))) {
            return this._NgIf_12_6.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_12_0_0 = this.context.showSelect;
        this._NgIf_12_6.check_ngIf(currVal_12_0_0, throwOnChange, false);
        this._NgIf_12_6.ngDoCheck(this, this._anchor_12, throwOnChange);
        this._vc_12.detectChangesInNestedViews(throwOnChange);
        const currVal_25 = !this.context.showSelect;
        if (import3.checkBinding(throwOnChange, this._expr_25, currVal_25)) {
            this.renderer.setElementClass(this._el_1, 'collapsed', currVal_25);
            this._expr_25 = currVal_25;
        }
        const currVal_26 = this.context.prevDisabled();
        if (import3.checkBinding(throwOnChange, this._expr_26, currVal_26)) {
            this.renderer.setElementProperty(this._el_8, 'disabled', currVal_26);
            this._expr_26 = currVal_26;
        }
        const currVal_27 = this.context.nextDisabled();
        if (import3.checkBinding(throwOnChange, this._expr_27, currVal_27)) {
            this.renderer.setElementProperty(this._el_16, 'disabled', currVal_27);
            this._expr_27 = currVal_27;
        }
    }
    destroyInternal() {
        this._vc_12.destroyNestedViews();
    }
    createEmbeddedViewInternal(nodeIndex) {
        if ((nodeIndex == 12)) {
            return new View_NgbDatepickerNavigation1(this.viewUtils, this, 12, this._anchor_12, this._vc_12);
        }
        return null;
    }
    handleEvent_8(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            const pd_sub_0 = (this.context.doNavigate(this.context.navigation.PREV) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
    handleEvent_16(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'click')) {
            const pd_sub_0 = (this.context.doNavigate(this.context.navigation.NEXT) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}
class View_NgbDatepickerNavigation1 extends import2.AppView {
    constructor(viewUtils, parentView, parentIndex, parentElement, declaredViewContainer) {
        super(View_NgbDatepickerNavigation1, renderType_NgbDatepickerNavigation, import6.ViewType.EMBEDDED, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways, declaredViewContainer);
    }
    createInternal(rootSelector) {
        this._el_0 = import3.createRenderElement(this.renderer, null, 'td', import3.EMPTY_INLINE_ARRAY, null);
        this._text_1 = this.renderer.createText(this._el_0, '\n          ', null);
        this._el_2 = import3.createRenderElement(this.renderer, this._el_0, 'ngb-datepicker-navigation-select', import3.EMPTY_INLINE_ARRAY, null);
        this.compView_2 = new import15.View_NgbDatepickerNavigationSelect0(this.viewUtils, this, 2, this._el_2);
        this._NgbDatepickerNavigationSelect_2_3 = new import15.Wrapper_NgbDatepickerNavigationSelect(this.parentView.parentView.injectorGet(import8.NgbDatepickerI18n, this.parentView.parentIndex), this.parentView.parentView.injectorGet(import9.NgbCalendar, this.parentView.parentIndex));
        this._text_3 = this.renderer.createText(null, '\n          ', null);
        this.compView_2.create(this._NgbDatepickerNavigationSelect_2_3.context);
        this._text_4 = this.renderer.createText(this._el_0, '\n        ', null);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_2, new import3.InlineArray2(2, 'select', null), this.eventHandler(this.handleEvent_2));
        this._NgbDatepickerNavigationSelect_2_3.subscribe(this, this.eventHandler(this.handleEvent_2), true);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [
            this._el_0,
            this._text_1,
            this._el_2,
            this._text_3,
            this._text_4
        ]), [disposable_0]);
        return null;
    }
    injectorGetInternal(token, requestNodeIndex, notFoundResult) {
        if (((token === import14.NgbDatepickerNavigationSelect) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 3)))) {
            return this._NgbDatepickerNavigationSelect_2_3.context;
        }
        return notFoundResult;
    }
    detectChangesInternal(throwOnChange) {
        const currVal_2_0_0 = this.parentView.context.date;
        this._NgbDatepickerNavigationSelect_2_3.check_date(currVal_2_0_0, throwOnChange, false);
        const currVal_2_0_1 = this.parentView.context.disabled;
        this._NgbDatepickerNavigationSelect_2_3.check_disabled(currVal_2_0_1, throwOnChange, false);
        const currVal_2_0_2 = this.parentView.context.maxDate;
        this._NgbDatepickerNavigationSelect_2_3.check_maxDate(currVal_2_0_2, throwOnChange, false);
        const currVal_2_0_3 = this.parentView.context.minDate;
        this._NgbDatepickerNavigationSelect_2_3.check_minDate(currVal_2_0_3, throwOnChange, false);
        this._NgbDatepickerNavigationSelect_2_3.ngDoCheck(this, this._el_2, throwOnChange);
        this.compView_2.detectChanges(throwOnChange);
    }
    destroyInternal() {
        this.compView_2.destroy();
        this._NgbDatepickerNavigationSelect_2_3.ngOnDestroy();
    }
    visitRootNodesInternal(cb, ctx) {
        cb(this._el_0, ctx);
    }
    handleEvent_2(eventName, $event) {
        this.markPathToRootAsCheckOnce();
        var result = true;
        if ((eventName == 'select')) {
            const pd_sub_0 = (this.parentView.context.selectDate($event) !== false);
            result = (pd_sub_0 && result);
        }
        return result;
    }
}
//# sourceMappingURL=datepicker-navigation.ngfactory.js.map