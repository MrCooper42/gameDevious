/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '@ng-bootstrap/ng-bootstrap/modal/modal-window';
import * as import1 from '@angular/core/src/change_detection/change_detection';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '@angular/core/src/linker/element_ref';
export var Wrapper_NgbModalWindow = (function () {
    function Wrapper_NgbModalWindow(p0, p1) {
        this._changed = false;
        this.context = new import0.NgbModalWindow(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
        this._expr_1 = import1.UNINITIALIZED;
        this._expr_2 = import1.UNINITIALIZED;
        this._expr_3 = import1.UNINITIALIZED;
        this._expr_4 = import1.UNINITIALIZED;
    }
    Wrapper_NgbModalWindow.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_NgbModalWindow.prototype.ngOnDestroy = function () {
        this.context.ngOnDestroy();
        (this.subscription0 && this.subscription0.unsubscribe());
    };
    Wrapper_NgbModalWindow.prototype.check_backdrop = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.backdrop = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_NgbModalWindow.prototype.check_keyboard = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_1, currValue))) {
            this._changed = true;
            this.context.keyboard = currValue;
            this._expr_1 = currValue;
        }
    };
    Wrapper_NgbModalWindow.prototype.check_size = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_2, currValue))) {
            this._changed = true;
            this.context.size = currValue;
            this._expr_2 = currValue;
        }
    };
    Wrapper_NgbModalWindow.prototype.check_windowClass = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_3, currValue))) {
            this._changed = true;
            this.context.windowClass = currValue;
            this._expr_3 = currValue;
        }
    };
    Wrapper_NgbModalWindow.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        if (!throwOnChange) {
            if ((view.numberOfChecks === 0)) {
                this.context.ngOnInit();
            }
        }
        return changed;
    };
    Wrapper_NgbModalWindow.prototype.checkHost = function (view, componentView, el, throwOnChange) {
        var currVal_4 = ('modal fade in' + (this.context.windowClass ? (' ' + this.context.windowClass) : ''));
        if (import3.checkBinding(throwOnChange, this._expr_4, currVal_4)) {
            view.renderer.setElementProperty(el, 'className', currVal_4);
            this._expr_4 = currVal_4;
        }
    };
    Wrapper_NgbModalWindow.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        if ((eventName == 'keyup.esc')) {
            var pd_sub_0 = (this.context.escKey($event) !== false);
            result = (pd_sub_0 && result);
        }
        if ((eventName == 'click')) {
            var pd_sub_1 = (this.context.backdropClick($event) !== false);
            result = (pd_sub_1 && result);
        }
        return result;
    };
    Wrapper_NgbModalWindow.prototype.subscribe = function (view, _eventHandler, emit0) {
        this._eventHandler = _eventHandler;
        if (emit0) {
            (this.subscription0 = this.context.dismissEvent.subscribe(_eventHandler.bind(view, 'dismiss')));
        }
    };
    return Wrapper_NgbModalWindow;
}());
var renderType_NgbModalWindow_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_NgbModalWindow_Host0 = (function (_super) {
    __extends(View_NgbModalWindow_Host0, _super);
    function View_NgbModalWindow_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_NgbModalWindow_Host0, renderType_NgbModalWindow_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
    }
    View_NgbModalWindow_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'ngb-modal-window', new import3.InlineArray8(6, 'role', 'dialog', 'style', 'display: block;', 'tabindex', '-1'), rootSelector, null);
        this.compView_0 = new View_NgbModalWindow0(this.viewUtils, this, 0, this._el_0);
        this._NgbModalWindow_0_3 = new Wrapper_NgbModalWindow(new import8.ElementRef(this._el_0), this.renderer);
        this.compView_0.create(this._NgbModalWindow_0_3.context);
        var disposable_0 = import3.subscribeToRenderElement(this, this._el_0, new import3.InlineArray4(4, 'keyup.esc', null, 'click', null), this.eventHandler(this.handleEvent_0));
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), [disposable_0]);
        return new import7.ComponentRef_(0, this, this._el_0, this._NgbModalWindow_0_3.context);
    };
    View_NgbModalWindow_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.NgbModalWindow) && (0 === requestNodeIndex))) {
            return this._NgbModalWindow_0_3.context;
        }
        return notFoundResult;
    };
    View_NgbModalWindow_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._NgbModalWindow_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this._NgbModalWindow_0_3.checkHost(this, this.compView_0, this._el_0, throwOnChange);
        this.compView_0.detectChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._NgbModalWindow_0_3.context.ngAfterViewInit();
            }
        }
    };
    View_NgbModalWindow_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
        this._NgbModalWindow_0_3.ngOnDestroy();
    };
    View_NgbModalWindow_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    View_NgbModalWindow_Host0.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, ctx) {
        if (((nodeIndex == 0) && (ngContentIndex == 0))) { }
    };
    View_NgbModalWindow_Host0.prototype.handleEvent_0 = function (eventName, $event) {
        this.compView_0.markPathToRootAsCheckOnce();
        var result = true;
        result = (this._NgbModalWindow_0_3.handleEvent(eventName, $event) && result);
        return result;
    };
    return View_NgbModalWindow_Host0;
}(import2.AppView));
export var NgbModalWindowNgFactory = new import7.ComponentFactory('ngb-modal-window', View_NgbModalWindow_Host0, import0.NgbModalWindow);
var styles_NgbModalWindow = [];
var renderType_NgbModalWindow = import3.createRenderComponentType('', 1, import5.ViewEncapsulation.None, styles_NgbModalWindow, {});
export var View_NgbModalWindow0 = (function (_super) {
    __extends(View_NgbModalWindow0, _super);
    function View_NgbModalWindow0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_NgbModalWindow0, renderType_NgbModalWindow, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import1.ChangeDetectorStatus.CheckAlways);
        this._expr_6 = import1.UNINITIALIZED;
    }
    View_NgbModalWindow0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'role', 'document'), null);
        this._text_2 = this.renderer.createText(this._el_1, '\n        ', null);
        this._el_3 = import3.createRenderElement(this.renderer, this._el_1, 'div', new import3.InlineArray2(2, 'class', 'modal-content'), null);
        this.projectNodes(this._el_3, 0);
        this._text_4 = this.renderer.createText(this._el_1, '\n    ', null);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._text_5
        ]), null);
        return null;
    };
    View_NgbModalWindow0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_6 = ('modal-dialog' + (this.context.size ? (' modal-' + this.context.size) : ''));
        if (import3.checkBinding(throwOnChange, this._expr_6, currVal_6)) {
            this.renderer.setElementProperty(this._el_1, 'className', currVal_6);
            this._expr_6 = currVal_6;
        }
    };
    return View_NgbModalWindow0;
}(import2.AppView));
//# sourceMappingURL=modal-window.ngfactory.js.map